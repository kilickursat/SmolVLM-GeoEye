version: '3.8'

services:
  # Main Streamlit application with RunPod integration
  geotechnical-workflow:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      # RunPod Configuration
      - RUNPOD_API_KEY=${RUNPOD_API_KEY:-}
      - RUNPOD_ENDPOINT_ID=${RUNPOD_ENDPOINT_ID:-}
      
      # HuggingFace Configuration
      - HF_TOKEN=${HF_TOKEN:-}
      
      # Streamlit Configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_UPLOAD_SIZE_MB=${MAX_UPLOAD_SIZE_MB:-200}
      - PROCESSING_TIMEOUT=${PROCESSING_TIMEOUT:-300}
    volumes:
      # Mount source code for development
      - .:/app
      # Mount uploads directory
      - ./uploads:/app/uploads
      # Mount cache directory
      - streamlit_cache:/app/.streamlit
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - geotechnical-network

  # Optional: RunPod worker for local testing (when not using serverless)
  # Uncomment this service if you want to run SmolVLM locally for development
  # runpod-worker-local:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.runpod
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - TRANSFORMERS_CACHE=/app/cache
  #     - HF_HOME=/app/cache
  #     - HF_TOKEN=${HF_TOKEN:-}
  #     - TORCH_HOME=/app/cache
  #     - PYTHONUNBUFFERED=1
  #   volumes:
  #     - model_cache:/app/cache
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   restart: unless-stopped
  #   networks:
  #     - geotechnical-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - geotechnical-network

  # PostgreSQL for data persistence (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-geotechnical}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - geotechnical-network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - geotechnical-workflow
    restart: unless-stopped
    networks:
      - geotechnical-network
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - geotechnical-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - geotechnical-network
    profiles:
      - monitoring

volumes:
  # Persistent volumes
  streamlit_cache:
    driver: local
  model_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  geotechnical-network:
    driver: bridge
    name: geotechnical-network

# Override configurations for different environments
---
# Development configuration
version: '3.8'
x-development: &development
  extends:
    service: geotechnical-workflow
  environment:
    - DEBUG=true
    - LOG_LEVEL=DEBUG
  volumes:
    - .:/app:delegated  # Faster file sync on macOS
  command: streamlit run app.py --server.address=0.0.0.0 --server.port=8501 --server.runOnSave=true

# Production configuration  
x-production: &production
  extends:
    service: geotechnical-workflow
  environment:
    - DEBUG=false
    - LOG_LEVEL=INFO
    - STREAMLIT_SERVER_HEADLESS=true
  restart: always
  deploy:
    replicas: 2
    resources:
      limits:
        memory: 2G
      reservations:
        memory: 1G
