version: '3.8'

services:
  # Main SmolVLM-GeoEye Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smolvlm-geoeye-app
    environment:
      - ENVIRONMENT=production
      - RUNPOD_API_KEY=${RUNPOD_API_KEY}
      - RUNPOD_ENDPOINT_ID=${RUNPOD_ENDPOINT_ID}
      - HF_TOKEN=${HF_TOKEN}
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/geotechnical
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - COST_ALERT_THRESHOLD=${COST_ALERT_THRESHOLD:-100.0}
    ports:
      - "8501:8501"
    depends_on:
      - db
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smolvlm-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: smolvlm-geoeye-db
    environment:
      - POSTGRES_DB=geotechnical
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smolvlm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smolvlm-geoeye-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smolvlm-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smolvlm-geoeye-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - smolvlm-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: smolvlm-geoeye-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - smolvlm-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: smolvlm-geoeye-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - smolvlm-network

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: smolvlm-geoeye-backup
    environment:
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/geotechnical
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - smolvlm-network

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smolvlm-geoeye-api
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
    environment:
      - ENVIRONMENT=production
      - RUNPOD_API_KEY=${RUNPOD_API_KEY}
      - RUNPOD_ENDPOINT_ID=${RUNPOD_ENDPOINT_ID}
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@db:5432/geotechnical
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smolvlm-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  smolvlm-network:
    driver: bridge
